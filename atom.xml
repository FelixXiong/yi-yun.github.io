<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>念念不忘，必有回响</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yi-yun.github.io/"/>
  <updated>2018-08-18T02:58:19.834Z</updated>
  <id>http://yi-yun.github.io/</id>
  
  <author>
    <name>Yi-Yun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio 安装（减少 C 盘空间）</title>
    <link href="http://yi-yun.github.io/2018/08/18/Android-Studio-%E5%AE%89%E8%A3%85/"/>
    <id>http://yi-yun.github.io/2018/08/18/Android-Studio-安装/</id>
    <published>2018-08-18T02:47:28.000Z</published>
    <updated>2018-08-18T02:58:19.834Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><br>  <img src="https://i.loli.net/2018/08/15/5b73a619714be.jpg" alt="IMG_5686.jpg" title="IMG_5686.jpg" class="full-image" width="650/"><br></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前重新安装了双系统，装完怎么能没有 Android Studio 这个神器呢？<br>但博主是个强迫症的人，一般软件不喜欢安装在 C 盘，最主要的原因是 C 盘空间初始分的太小，加上 Windows 的尿性，天天更新之类少空间就很头疼<br><a id="more"></a></p><h3 id="配置-Java-环境"><a href="#配置-Java-环境" class="headerlink" title="配置 Java 环境"></a>配置 Java 环境</h3><p>这里我装的是 Java 8 的环境，配置环境对于老手来说手到擒来。<del>我不会告诉你们我配的时候去网上看了遍教程……</del></p><h3 id="下载-Android-Studio"><a href="#下载-Android-Studio" class="headerlink" title="下载 Android Studio"></a>下载 Android Studio</h3><p>很多人推荐去<a href="https://developer.android.com/studio/" target="_blank" rel="noopener">官网</a>下，这是最新的（可能有老版的，但我没找到），但 3.1 以上的版本我记得没有 Android Monitor，而且可能访问速度不够快，最好有个梯子，个人不是很推荐</p><p>我是去<a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">这里</a>下的，点开页面惊不惊喜？竟然是中文的！你也可以直接在此页面点<a href="https://dl.google.com/dl/android/studio/install/3.0.1.0/android-studio-ide-171.4443003-windows.exe?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener">链接</a>下载 Android Studio 3.0.1.exe 安装程序</p><h3 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h3><p>更改安装路径，一路 next 即可</p><h4 id="配置-Android-Studio（重要）"><a href="#配置-Android-Studio（重要）" class="headerlink" title="配置 Android Studio（重要）"></a>配置 Android Studio（重要）</h4><h4 id="选择-Custom"><a href="#选择-Custom" class="headerlink" title="选择 Custom"></a>选择 Custom</h4><p>选择 Standard 模式可能更改不了路径</p><h4 id="取消勾选-Android-Virtual-Device"><a href="#取消勾选-Android-Virtual-Device" class="headerlink" title="取消勾选 Android Virtual Device"></a>取消勾选 Android Virtual Device</h4><p>顾名思义安卓虚拟机，调试用的个人不喜欢安装这玩意，原因有很多：</p><ul><li>占用空间只能装在 C 盘的</li><li>我有淘汰的 Android 手机</li><li>没有域名映射，调试的时候有点问题</li><li>实在不行，可以用夜神模拟器代替</li></ul><p>总之，我就算是死也不会装的！<del>真香</del></p><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>主要移动的是用户目录下的以下文件<img src="https://i.loli.net/2018/08/18/5b77837e050c8.png" alt="文件目录"></p><h5 id="更改-gradle-目录"><a href="#更改-gradle-目录" class="headerlink" title="更改 gradle 目录"></a>更改 gradle 目录</h5><p>打开 AS 的 setting，进行相关设置</p><p><img src="https://i.loli.net/2018/08/18/5b7784e690ba4.png" alt=""></p><h5 id="更改-Android-Studio-配置相关目录"><a href="#更改-Android-Studio-配置相关目录" class="headerlink" title="更改 Android Studio 配置相关目录"></a>更改 Android Studio 配置相关目录</h5><p>进入 Android Studio 安装位置，比如我安装在了<code>D:\Android Studio</code>，找到<code>D:\Android Studio\bin\idea.properties</code><br>更改配置文件，将两个路径更改为自己喜欢的路径，如图</p><p><img src="https://i.loli.net/2018/08/18/5b77866f6a904.png" alt=""></p><p>更改完保存重启即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://i.loli.net/2018/08/15/5b73a619714be.jpg&quot; alt=&quot;IMG_5686.jpg&quot; title=&quot;IMG_5686.jpg&quot; class=&quot;full-image&quot; width=&quot;650/&quot;&gt;&lt;br&gt;&lt;/p&gt;


&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前重新安装了双系统，装完怎么能没有 Android Studio 这个神器呢？&lt;br&gt;但博主是个强迫症的人，一般软件不喜欢安装在 C 盘，最主要的原因是 C 盘空间初始分的太小，加上 Windows 的尿性，天天更新之类少空间就很头疼&lt;br&gt;
    
    </summary>
    
      <category term="win 配置" scheme="http://yi-yun.github.io/categories/win-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Android Studio 安装配置" scheme="http://yi-yun.github.io/tags/Android-Studio-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    
      <category term="笔记" scheme="http://yi-yun.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>爬坑指南</title>
    <link href="http://yi-yun.github.io/2018/07/30/%E7%88%AC%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yi-yun.github.io/2018/07/30/爬坑指南/</id>
    <published>2018-07-30T07:24:53.000Z</published>
    <updated>2018-07-30T13:53:26.138Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><br>  <img src="https://i.loli.net/2018/07/22/5b542f5c58d76.jpg" alt="IMG_5686.jpg" title="IMG_5686.jpg" width="250"><br></p><font size="6" face="黑体"><center>基于树莓派的微信机器人</center></font><p>在大一计算机导论课的时候，老师演示了用 APP 控制 LED 灯的系统，当时觉得很极客。脑海中就幻想，在九点下班的路上，在微信对话框内输入<code>打开空调</code>，回到家后就能享受迎面而来的凉风……而这一切都是你自己搭建的，那是多么美妙的事情！</p><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>很早之前，学长送了我一个树莓派作为社团留任礼物。一直想愉快地玩耍，却迟迟不得空。 2018 年寒假终于感受到了嵌入式的魅力。有了寒假折腾的基础（折腾过程可能后续会写到博客），到了嵌入式系统开发的课程，<del>为了大作业</del>（其实还是自己想折腾）做了一个基于树莓派的微信机器人。<br><a id="more"></a></p><h3 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h3><p>跟着脑海中的思路先画了思维导图<br><img src="https://i.loli.net/2018/07/22/5b5469d3cce66.png" alt=""></p><ul><li><p><strong>模块采用</strong><br>查阅资料后，了解到微信机器人 python 模块流行的有两种：itchat 和 wxpy。初步比较后采用 itchat，原因是wxpy是在itchat上改的。从某种意义上来说，itchat 更原始一点。<br><a href="http://itchat.readthedocs.io/zh/latest/" target="_blank" rel="noopener">itchat 官方文档</a><br>例：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@itchat.msg_register(TEXT)  #处理对话框内的消息先根据消息类型进行注册</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Chat.has_music(msg[<span class="string">'Text'</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>自动回复</strong><br>回复对话需要相应的 API 支持，最常见的是图灵机器人（<del>个人觉得是名字取得好才常见</del>）。本项目用到的还有小豆机器人的 API 。<br>国外还有被谷歌收购的 api.ai ，基于机器学习，有时间的话可以研究一下。<br>例：小豆机器人注册账号得到相应的 Key 后可在浏览器打开<a href="http://api.douqq.com/?key=Rzd5bW49Mj0vZ09hbmh0MEJ1VENReGdWd2hZQUFBPT0&amp;msg=什么是物联网" target="_blank" rel="noopener">链接</a>（这里用的是我的 key）<br>同理图灵机器人也会有相应的 Key，以<code>res = requests.post(apiUrl, data=data).json()</code>的代码方式（需要以 json 格式）请求数据，然后得到结果<code>title = res.get(&#39;text&#39;)</code></p></li><li><p><strong>控制 LED</strong><br>对于了解过树莓派 GPIO 的人来说很简单。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO  <span class="comment">#引入模块</span></span><br><span class="line">pin=<span class="number">17</span>  <span class="comment">#设置引脚</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)  <span class="comment">#设置BCM模式</span></span><br><span class="line">GPIO.setup(pin,GPIO.OUT)  <span class="comment">#初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.output(pin,<span class="keyword">True</span>)   <span class="comment">#高电平开</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.output(pin,<span class="keyword">False</span>)   <span class="comment">#低电平关</span></span><br></pre></td></tr></table></figure></li><li><p><strong>天气爬取</strong><br>室外天气爬取的是墨迹天气，参考的是<a href="https://zhuanlan.zhihu.com/p/24983204" target="_blank" rel="noopener">树莓派语音闹钟</a><br>这里用到的<a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=%E5%9F%BA%E4%BA%8E%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5" target="_blank" rel="noopener">百度 API </a>很有意思，关于语音类的以后可能还会用到<br>因为还有 DHT11 模块获取室内温湿度，所以在原来基础的代码上又加了一些代码</p></li><li><strong>点歌播放</strong><br>  首先要有音乐播放器<code>sudo apt-get install mplayer</code>，这里用到的是 mplayer，后面直接跟链接就能播放<br>  有了播放器后，接下来是音乐链接了。这里是最苦恼我的地方。几个月前在网上找了很多教程。Linux 相关的最出名的就是网易云音乐了。所以先找的是网易云音乐，什么 Node.js 版，CLI 下的等等，有的功能太全需要登陆，有的不符合要求······总之，均不满意。<br>  后来无意中浏览小豆机器人功能列表时发现了这货竟然提供点歌播放，迅速输入连接获取的是一串文字，用正则表达式匹配后，竟然成功点歌播放了。只是因为采用的是 HTTP 协议，歌名不能有空格。<del>大作业演示的时候不输空格就好了，总比没有好</del><br>  有了链接后，还需多线程停止播放，不然你得听完整首歌才能开灯，太 Low 了！<br>  代码如下:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_music</span><span class="params">(text)</span>:</span></span><br><span class="line">thre=threading.Thread();</span><br><span class="line"><span class="keyword">if</span> text[<span class="number">0</span>].__eq__(<span class="string">"点"</span>) <span class="keyword">and</span> text[<span class="number">1</span>].__eq__(<span class="string">"歌"</span>):</span><br><span class="line">    reply = Tuling.get_response(text)</span><br><span class="line">    pattern=re.compile(<span class="string">r'http://zhangmenshiting.*'</span>)</span><br><span class="line">    url=re.findall(pattern,reply)</span><br><span class="line">    url=url[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">    thre=threading.Thread(target=play,args=[url])</span><br><span class="line">    thre.start()</span><br><span class="line"><span class="keyword">elif</span> text.__contains__(<span class="string">"停止"</span>):</span><br><span class="line">    os.system(<span class="string">'killall -9 mplayer'</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> deng(text)</span><br></pre></td></tr></table></figure></li></ul><h3 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h3><p><a href="https://github.com/yi-yun/raspi-chatrobot" target="_blank" rel="noopener">项目地址</a><br>可能因为第一次做项目的关系，略显得有点稚嫩。不仅体现在代码上，还在工作流上有问题。后来静下心来，用思维导图重新梳理了思路，打了草稿，一切都迎刃而解。<br>欢迎各位看官提出各种见解和建议！</p>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://i.loli.net/2018/07/22/5b542f5c58d76.jpg&quot; alt=&quot;IMG_5686.jpg&quot; title=&quot;IMG_5686.jpg&quot; width=&quot;250&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;font size=&quot;6&quot; face=&quot;黑体&quot;&gt;&lt;center&gt;基于树莓派的微信机器人&lt;/center&gt;&lt;/font&gt;

&lt;p&gt;在大一计算机导论课的时候，老师演示了用 APP 控制 LED 灯的系统，当时觉得很极客。脑海中就幻想，在九点下班的路上，在微信对话框内输入&lt;code&gt;打开空调&lt;/code&gt;，回到家后就能享受迎面而来的凉风……而这一切都是你自己搭建的，那是多么美妙的事情！&lt;/p&gt;
&lt;h3 id=&quot;相关背景&quot;&gt;&lt;a href=&quot;#相关背景&quot; class=&quot;headerlink&quot; title=&quot;相关背景&quot;&gt;&lt;/a&gt;相关背景&lt;/h3&gt;&lt;p&gt;很早之前，学长送了我一个树莓派作为社团留任礼物。一直想愉快地玩耍，却迟迟不得空。 2018 年寒假终于感受到了嵌入式的魅力。有了寒假折腾的基础（折腾过程可能后续会写到博客），到了嵌入式系统开发的课程，&lt;del&gt;为了大作业&lt;/del&gt;（其实还是自己想折腾）做了一个基于树莓派的微信机器人。&lt;br&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://yi-yun.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://yi-yun.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="聊天机器人" scheme="http://yi-yun.github.io/tags/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>陌上花开</title>
    <link href="http://yi-yun.github.io/2018/07/24/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yi-yun.github.io/2018/07/24/博客小记/</id>
    <published>2018-07-24T02:34:54.000Z</published>
    <updated>2018-07-24T02:46:20.677Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/07/22/5b543ab189014.png" class="full-image"></p><hr><blockquote><p>陌上花开，可缓缓归矣。</p></blockquote><p>第一次知道这句话是在初二，是一位好友的 QQ 昵称。转眼六载有余，当时可曾想这句话会成为我人生中第一个博客的开篇句。<br><a id="more"></a><br>这句话的意思大致是夫君想念妻子，希望妻子早点从娘家回来，但显然我并没有那么煽情。博客引用这句话意在自勉，希望不再自甘堕落，找回自我。</p><p>最近浏览大佬博客，看到了“人为什么活着”。这个问题每个人的每个阶段有不同的理解。现在的我为了学习，学好了为了什么？为了能找工作？找到工作为了什么？为了人活着。</p><p>也许那个时候又会问自己人活着为了什么？我会答，为了去做自己最喜欢做的事情，也是我 GitHub 的 bio “Do Your Favorites ”，真正做到的又有几个呢？没有人会告诉你也不能告诉你死后会怎么样，无神论，有神论？谁知道呢。Enjoy now enough!</p><h3 id="博客目的"><a href="#博客目的" class="headerlink" title="博客目的"></a>博客目的</h3><ul><li>输出提升<br>一月前加入了某大佬的知识星球，真的感触颇多，每天的分享，仿佛大家都在努力奋斗，而只有自己堕落在寝室中，无所事事……终于下定决心开个博客，写点东西，总比在寝室里睡觉看视频强。</li><li>查询笔记<br>不久前，重装了 win10 系统，又重新配了各种环境，教程网上一通搜索……更折腾的是，有大神推荐我 Arch Linux，因为涉及到双系统，装了七八遍，也是官方 wiki 以及各种教程乱找，用多方版本成功体验。最后终于受不了，决定有一个适合自己的笔记博客。当然期待与各位看官的共同进步！</li></ul><h3 id="选择平台"><a href="#选择平台" class="headerlink" title="选择平台"></a>选择平台</h3><ul><li>你为什么选这里？为什么呢？<br>因为穷…自己的博客需要云主机、域名，哦，对了还有那个恼人的备案。其实主要是云主机，学生机每个月十块钱（其实不贵），但加上 VPS 每个月三十，个人认为不是很值。虽然“免费的是最贵的”，但显然 GitHub Pages 托管的博客要排除在外。</li><li>既然你有 VPS ，为什么不搭 VPS 上呢<br><del>还是因为穷</del>…开个玩笑，VPS 主机在旧金山，Ping 延迟过高，加上不想耦合太紧（就像代码一样）。如果我关 VPS 的话，要考虑博客等，过于麻烦。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/07/22/5b543ab189014.png&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;陌上花开，可缓缓归矣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次知道这句话是在初二，是一位好友的 QQ 昵称。转眼六载有余，当时可曾想这句话会成为我人生中第一个博客的开篇句。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yi-yun.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="导航" scheme="http://yi-yun.github.io/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="关于我" scheme="http://yi-yun.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
  </entry>
  
</feed>
